import pandas as pd
import os
os.chdir("C://Users//Janvi Acharya//Downloads")
df=pd.read_csv("heart.csv")
df.head()
df.isna().sum()
df.dtypes
y=df["target"]
df=df.drop(["target"],1)
categorical=df.drop(["age","trestbps","chol","thalach","oldpeak"],1)
categorical.head()
numdf=df[["age","trestbps","chol","thalach","oldpeak"]]
numdf.head()
from sklearn.preprocessing import MinMaxScaler
scaler=MinMaxScaler()
cols=list(numdf) 
numdf=scaler.fit_transform(numdf)
numdf=pd.DataFrame(numdf,columns=cols)
numdf.head()
numdf["target"]=y
df=pd.concat([numdf,categorical],1)
df.head()
X=df.drop(["target"],1)
y=df["target"]
y.head()
X.head()
from sklearn.feature_selection import RFE
from sklearn.linear_model import LogisticRegression
lin_reg = LogisticRegression()
#2 is features you want to take for 
features = RFE(lin_reg,3)
features.fit(X,y)
features.ranking_
features.support_
cols = list(X)
cols = pd.Series(cols)
cols[features.support_]
selected_features=["thalach","oldpeak","exang"]
from sklearn.model_selection import train_test_split as tts
X_train,X_test,y_train,y_test=tts(X,y,test_size=0.2,random_state=42)
#logistics
from sklearn.metrics import r2_score,mean_squared_error,median_absolute_error
from sklearn import metrics
from sklearn.linear_model import LogisticRegression,RidgeCV,LassoCV,ElasticNetCV
log_reg=LogisticRegression(multi_class="multinomial",solver='newton-cg').fit(X_train,y_train)
y_pred= log_reg.predict(X_test)
metrics.accuracy_score(y_pred,y_test)
metrics.confusion_matrix(y_pred,y_test)
#y_pred
#with features
filter2=X[selected_features]
from sklearn.model_selection import train_test_split as tts
filter2_train,filter2_test,y_train,y_test=tts(filter2,y,test_size=0.2,random_state=42)
#logistics
from sklearn.metrics import r2_score,mean_squared_error,median_absolute_error
from sklearn import metrics
from sklearn.linear_model import LogisticRegression,RidgeCV,LassoCV,ElasticNetCV
log_reg=LogisticRegression(multi_class="multinomial",solver='newton-cg').fit(filter2_train,y_train)
y_pred= log_reg.predict(filter2_test)
metrics.accuracy_score(y_pred,y_test)
#metrics.confusion_matrix(y_pred,y_test)
from sklearn.metrics import confusion_matrix
cm =confusion_matrix(y_test,y_pred)
cm
#random forest
from sklearn.ensemble import RandomForestClassifier
regressor = RandomForestClassifier(n_estimators=20, random_state=0)  
regressor.fit(X_train, y_train)  
y_pred = regressor.predict(X_test) 
metrics.accuracy_score(y_pred,y_test)
#random forest with features
from sklearn.ensemble import RandomForestClassifier
regressor = RandomForestClassifier(n_estimators=20, random_state=0)  
regressor.fit(filter2_train, y_train)  
y_pred = regressor.predict(filter2_test) 
metrics.accuracy_score(y_pred,y_test)
#Decision Tree Classifier
from sklearn.tree import DecisionTreeClassifier
classifier = DecisionTreeClassifier(criterion="entropy", random_state=42)
classifier.fit(X_train,y_train)
y_pred = classifier.predict(X_test)
metrics.accuracy_score(y_pred,y_test)
from sklearn.metrics import confusion_matrix
cm =confusion_matrix(y_test,y_pred)
#with features
from sklearn.tree import DecisionTreeClassifier
classifier = DecisionTreeClassifier(criterion="entropy", random_state=42)
classifier.fit(filter2_train,y_train)
y_pred = classifier.predict(filter2_test)
metrics.accuracy_score(y_pred,y_test)
